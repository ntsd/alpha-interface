// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package alphainterfacecontract

import "github.com/iotaledger/wasp/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncCloseOrder, funcCloseOrderThunk)
	exports.AddFunc(FuncClosePosition, funcClosePositionThunk)
	exports.AddFunc(FuncCreateOrder, funcCreateOrderThunk)
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncSetCrop, funcSetCropThunk)
	exports.AddFunc(FuncSetOwner, funcSetOwnerThunk)
	exports.AddView(ViewGetCrop, viewGetCropThunk)
	exports.AddView(ViewGetCrops, viewGetCropsThunk)
	exports.AddView(ViewGetMyPositions, viewGetMyPositionsThunk)
	exports.AddView(ViewGetOrders, viewGetOrdersThunk)
	exports.AddView(ViewGetOwner, viewGetOwnerThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyID()
	}
}

type CloseOrderContext struct {
	Params ImmutableCloseOrderParams
	State  MutableAlphaInterfaceContractState
}

func funcCloseOrderThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("alphainterfacecontract.funcCloseOrder")
	f := &CloseOrderContext{
		Params: ImmutableCloseOrderParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableAlphaInterfaceContractState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.OrderID().Exists(), "missing mandatory orderID")
	funcCloseOrder(ctx, f)
	ctx.Log("alphainterfacecontract.funcCloseOrder ok")
}

type ClosePositionContext struct {
	Params ImmutableClosePositionParams
	State  MutableAlphaInterfaceContractState
}

func funcClosePositionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("alphainterfacecontract.funcClosePosition")
	f := &ClosePositionContext{
		Params: ImmutableClosePositionParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableAlphaInterfaceContractState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Amount().Exists(), "missing mandatory amount")
	ctx.Require(f.Params.PositionID().Exists(), "missing mandatory positionID")
	funcClosePosition(ctx, f)
	ctx.Log("alphainterfacecontract.funcClosePosition ok")
}

type CreateOrderContext struct {
	Params ImmutableCreateOrderParams
	State  MutableAlphaInterfaceContractState
}

func funcCreateOrderThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("alphainterfacecontract.funcCreateOrder")
	f := &CreateOrderContext{
		Params: ImmutableCreateOrderParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableAlphaInterfaceContractState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.CropID().Exists(), "missing mandatory cropID")
	ctx.Require(f.Params.Leverage().Exists(), "missing mandatory leverage")
	ctx.Require(f.Params.Type().Exists(), "missing mandatory type")
	funcCreateOrder(ctx, f)
	ctx.Log("alphainterfacecontract.funcCreateOrder ok")
}

type InitContext struct {
	Params ImmutableInitParams
	State  MutableAlphaInterfaceContractState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("alphainterfacecontract.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableAlphaInterfaceContractState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcInit(ctx, f)
	ctx.Log("alphainterfacecontract.funcInit ok")
}

type SetCropContext struct {
	Params ImmutableSetCropParams
	State  MutableAlphaInterfaceContractState
}

func funcSetCropThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("alphainterfacecontract.funcSetCrop")
	f := &SetCropContext{
		Params: ImmutableSetCropParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableAlphaInterfaceContractState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Country().Exists(), "missing mandatory country")
	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	ctx.Require(f.Params.Yield().Exists(), "missing mandatory yield")
	funcSetCrop(ctx, f)
	ctx.Log("alphainterfacecontract.funcSetCrop ok")
}

type SetOwnerContext struct {
	Params ImmutableSetOwnerParams
	State  MutableAlphaInterfaceContractState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("alphainterfacecontract.funcSetOwner")
	// current owner of this smart contract
	access := ctx.State().GetAgentID(wasmlib.Key("owner"))
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableAlphaInterfaceContractState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("alphainterfacecontract.funcSetOwner ok")
}

type GetCropContext struct {
	Results MutableGetCropResults
	State   ImmutableAlphaInterfaceContractState
}

func viewGetCropThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("alphainterfacecontract.viewGetCrop")
	f := &GetCropContext{
		Results: MutableGetCropResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableAlphaInterfaceContractState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetCrop(ctx, f)
	ctx.Log("alphainterfacecontract.viewGetCrop ok")
}

type GetCropsContext struct {
	Results MutableGetCropsResults
	State   ImmutableAlphaInterfaceContractState
}

func viewGetCropsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("alphainterfacecontract.viewGetCrops")
	f := &GetCropsContext{
		Results: MutableGetCropsResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableAlphaInterfaceContractState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetCrops(ctx, f)
	ctx.Log("alphainterfacecontract.viewGetCrops ok")
}

type GetMyPositionsContext struct {
	Results MutableGetMyPositionsResults
	State   ImmutableAlphaInterfaceContractState
}

func viewGetMyPositionsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("alphainterfacecontract.viewGetMyPositions")
	f := &GetMyPositionsContext{
		Results: MutableGetMyPositionsResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableAlphaInterfaceContractState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetMyPositions(ctx, f)
	ctx.Log("alphainterfacecontract.viewGetMyPositions ok")
}

type GetOrdersContext struct {
	Results MutableGetOrdersResults
	State   ImmutableAlphaInterfaceContractState
}

func viewGetOrdersThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("alphainterfacecontract.viewGetOrders")
	f := &GetOrdersContext{
		Results: MutableGetOrdersResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableAlphaInterfaceContractState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetOrders(ctx, f)
	ctx.Log("alphainterfacecontract.viewGetOrders ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   ImmutableAlphaInterfaceContractState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("alphainterfacecontract.viewGetOwner")
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableAlphaInterfaceContractState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetOwner(ctx, f)
	ctx.Log("alphainterfacecontract.viewGetOwner ok")
}
